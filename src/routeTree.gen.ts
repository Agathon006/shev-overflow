/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as NotAuthenticatedImport } from './routes/_notAuthenticated'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as IndexImport } from './routes/index'
import { Route as AuthenticatedUsersIndexImport } from './routes/_authenticated/users/index'
import { Route as AuthenticatedQuestionsIndexImport } from './routes/_authenticated/questions/index'
import { Route as NotAuthenticatedAuthRegisterImport } from './routes/_notAuthenticated/auth/register'
import { Route as NotAuthenticatedAuthLoginImport } from './routes/_notAuthenticated/auth/login'
import { Route as AuthenticatedUsersUserIdImport } from './routes/_authenticated/users/$userId'
import { Route as AuthenticatedQuestionsCreateImport } from './routes/_authenticated/questions/create'
import { Route as AuthenticatedPostsCreateImport } from './routes/_authenticated/posts/create'
import { Route as AuthenticatedPostsPostIdImport } from './routes/_authenticated/posts/$postId'
import { Route as AuthenticatedUsersMeIndexImport } from './routes/_authenticated/users/me/index'
import { Route as AuthenticatedUsersMePostsIndexImport } from './routes/_authenticated/users/me/posts/index'
import { Route as AuthenticatedUsersMePostsPostIdImport } from './routes/_authenticated/users/me/posts/$postId'

// Create/Update Routes

const NotAuthenticatedRoute = NotAuthenticatedImport.update({
  id: '/_notAuthenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedUsersIndexRoute = AuthenticatedUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedQuestionsIndexRoute =
  AuthenticatedQuestionsIndexImport.update({
    id: '/questions/',
    path: '/questions/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const NotAuthenticatedAuthRegisterRoute =
  NotAuthenticatedAuthRegisterImport.update({
    id: '/auth/register',
    path: '/auth/register',
    getParentRoute: () => NotAuthenticatedRoute,
  } as any)

const NotAuthenticatedAuthLoginRoute = NotAuthenticatedAuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => NotAuthenticatedRoute,
} as any)

const AuthenticatedUsersUserIdRoute = AuthenticatedUsersUserIdImport.update({
  id: '/users/$userId',
  path: '/users/$userId',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedQuestionsCreateRoute =
  AuthenticatedQuestionsCreateImport.update({
    id: '/questions/create',
    path: '/questions/create',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedPostsCreateRoute = AuthenticatedPostsCreateImport.update({
  id: '/posts/create',
  path: '/posts/create',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedPostsPostIdRoute = AuthenticatedPostsPostIdImport.update({
  id: '/posts/$postId',
  path: '/posts/$postId',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedUsersMeIndexRoute = AuthenticatedUsersMeIndexImport.update({
  id: '/users/me/',
  path: '/users/me/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedUsersMePostsIndexRoute =
  AuthenticatedUsersMePostsIndexImport.update({
    id: '/users/me/posts/',
    path: '/users/me/posts/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedUsersMePostsPostIdRoute =
  AuthenticatedUsersMePostsPostIdImport.update({
    id: '/users/me/posts/$postId',
    path: '/users/me/posts/$postId',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_notAuthenticated': {
      id: '/_notAuthenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof NotAuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/posts/$postId': {
      id: '/_authenticated/posts/$postId'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof AuthenticatedPostsPostIdImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/posts/create': {
      id: '/_authenticated/posts/create'
      path: '/posts/create'
      fullPath: '/posts/create'
      preLoaderRoute: typeof AuthenticatedPostsCreateImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/questions/create': {
      id: '/_authenticated/questions/create'
      path: '/questions/create'
      fullPath: '/questions/create'
      preLoaderRoute: typeof AuthenticatedQuestionsCreateImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/users/$userId': {
      id: '/_authenticated/users/$userId'
      path: '/users/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof AuthenticatedUsersUserIdImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_notAuthenticated/auth/login': {
      id: '/_notAuthenticated/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof NotAuthenticatedAuthLoginImport
      parentRoute: typeof NotAuthenticatedImport
    }
    '/_notAuthenticated/auth/register': {
      id: '/_notAuthenticated/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof NotAuthenticatedAuthRegisterImport
      parentRoute: typeof NotAuthenticatedImport
    }
    '/_authenticated/questions/': {
      id: '/_authenticated/questions/'
      path: '/questions'
      fullPath: '/questions'
      preLoaderRoute: typeof AuthenticatedQuestionsIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/users/': {
      id: '/_authenticated/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/users/me/': {
      id: '/_authenticated/users/me/'
      path: '/users/me'
      fullPath: '/users/me'
      preLoaderRoute: typeof AuthenticatedUsersMeIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/users/me/posts/$postId': {
      id: '/_authenticated/users/me/posts/$postId'
      path: '/users/me/posts/$postId'
      fullPath: '/users/me/posts/$postId'
      preLoaderRoute: typeof AuthenticatedUsersMePostsPostIdImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/users/me/posts/': {
      id: '/_authenticated/users/me/posts/'
      path: '/users/me/posts'
      fullPath: '/users/me/posts'
      preLoaderRoute: typeof AuthenticatedUsersMePostsIndexImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedPostsPostIdRoute: typeof AuthenticatedPostsPostIdRoute
  AuthenticatedPostsCreateRoute: typeof AuthenticatedPostsCreateRoute
  AuthenticatedQuestionsCreateRoute: typeof AuthenticatedQuestionsCreateRoute
  AuthenticatedUsersUserIdRoute: typeof AuthenticatedUsersUserIdRoute
  AuthenticatedQuestionsIndexRoute: typeof AuthenticatedQuestionsIndexRoute
  AuthenticatedUsersIndexRoute: typeof AuthenticatedUsersIndexRoute
  AuthenticatedUsersMeIndexRoute: typeof AuthenticatedUsersMeIndexRoute
  AuthenticatedUsersMePostsPostIdRoute: typeof AuthenticatedUsersMePostsPostIdRoute
  AuthenticatedUsersMePostsIndexRoute: typeof AuthenticatedUsersMePostsIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedPostsPostIdRoute: AuthenticatedPostsPostIdRoute,
  AuthenticatedPostsCreateRoute: AuthenticatedPostsCreateRoute,
  AuthenticatedQuestionsCreateRoute: AuthenticatedQuestionsCreateRoute,
  AuthenticatedUsersUserIdRoute: AuthenticatedUsersUserIdRoute,
  AuthenticatedQuestionsIndexRoute: AuthenticatedQuestionsIndexRoute,
  AuthenticatedUsersIndexRoute: AuthenticatedUsersIndexRoute,
  AuthenticatedUsersMeIndexRoute: AuthenticatedUsersMeIndexRoute,
  AuthenticatedUsersMePostsPostIdRoute: AuthenticatedUsersMePostsPostIdRoute,
  AuthenticatedUsersMePostsIndexRoute: AuthenticatedUsersMePostsIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface NotAuthenticatedRouteChildren {
  NotAuthenticatedAuthLoginRoute: typeof NotAuthenticatedAuthLoginRoute
  NotAuthenticatedAuthRegisterRoute: typeof NotAuthenticatedAuthRegisterRoute
}

const NotAuthenticatedRouteChildren: NotAuthenticatedRouteChildren = {
  NotAuthenticatedAuthLoginRoute: NotAuthenticatedAuthLoginRoute,
  NotAuthenticatedAuthRegisterRoute: NotAuthenticatedAuthRegisterRoute,
}

const NotAuthenticatedRouteWithChildren =
  NotAuthenticatedRoute._addFileChildren(NotAuthenticatedRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof NotAuthenticatedRouteWithChildren
  '/posts/$postId': typeof AuthenticatedPostsPostIdRoute
  '/posts/create': typeof AuthenticatedPostsCreateRoute
  '/questions/create': typeof AuthenticatedQuestionsCreateRoute
  '/users/$userId': typeof AuthenticatedUsersUserIdRoute
  '/auth/login': typeof NotAuthenticatedAuthLoginRoute
  '/auth/register': typeof NotAuthenticatedAuthRegisterRoute
  '/questions': typeof AuthenticatedQuestionsIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
  '/users/me': typeof AuthenticatedUsersMeIndexRoute
  '/users/me/posts/$postId': typeof AuthenticatedUsersMePostsPostIdRoute
  '/users/me/posts': typeof AuthenticatedUsersMePostsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof NotAuthenticatedRouteWithChildren
  '/posts/$postId': typeof AuthenticatedPostsPostIdRoute
  '/posts/create': typeof AuthenticatedPostsCreateRoute
  '/questions/create': typeof AuthenticatedQuestionsCreateRoute
  '/users/$userId': typeof AuthenticatedUsersUserIdRoute
  '/auth/login': typeof NotAuthenticatedAuthLoginRoute
  '/auth/register': typeof NotAuthenticatedAuthRegisterRoute
  '/questions': typeof AuthenticatedQuestionsIndexRoute
  '/users': typeof AuthenticatedUsersIndexRoute
  '/users/me': typeof AuthenticatedUsersMeIndexRoute
  '/users/me/posts/$postId': typeof AuthenticatedUsersMePostsPostIdRoute
  '/users/me/posts': typeof AuthenticatedUsersMePostsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_notAuthenticated': typeof NotAuthenticatedRouteWithChildren
  '/_authenticated/posts/$postId': typeof AuthenticatedPostsPostIdRoute
  '/_authenticated/posts/create': typeof AuthenticatedPostsCreateRoute
  '/_authenticated/questions/create': typeof AuthenticatedQuestionsCreateRoute
  '/_authenticated/users/$userId': typeof AuthenticatedUsersUserIdRoute
  '/_notAuthenticated/auth/login': typeof NotAuthenticatedAuthLoginRoute
  '/_notAuthenticated/auth/register': typeof NotAuthenticatedAuthRegisterRoute
  '/_authenticated/questions/': typeof AuthenticatedQuestionsIndexRoute
  '/_authenticated/users/': typeof AuthenticatedUsersIndexRoute
  '/_authenticated/users/me/': typeof AuthenticatedUsersMeIndexRoute
  '/_authenticated/users/me/posts/$postId': typeof AuthenticatedUsersMePostsPostIdRoute
  '/_authenticated/users/me/posts/': typeof AuthenticatedUsersMePostsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/posts/$postId'
    | '/posts/create'
    | '/questions/create'
    | '/users/$userId'
    | '/auth/login'
    | '/auth/register'
    | '/questions'
    | '/users'
    | '/users/me'
    | '/users/me/posts/$postId'
    | '/users/me/posts'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/posts/$postId'
    | '/posts/create'
    | '/questions/create'
    | '/users/$userId'
    | '/auth/login'
    | '/auth/register'
    | '/questions'
    | '/users'
    | '/users/me'
    | '/users/me/posts/$postId'
    | '/users/me/posts'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_notAuthenticated'
    | '/_authenticated/posts/$postId'
    | '/_authenticated/posts/create'
    | '/_authenticated/questions/create'
    | '/_authenticated/users/$userId'
    | '/_notAuthenticated/auth/login'
    | '/_notAuthenticated/auth/register'
    | '/_authenticated/questions/'
    | '/_authenticated/users/'
    | '/_authenticated/users/me/'
    | '/_authenticated/users/me/posts/$postId'
    | '/_authenticated/users/me/posts/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  NotAuthenticatedRoute: typeof NotAuthenticatedRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  NotAuthenticatedRoute: NotAuthenticatedRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/_notAuthenticated"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/posts/$postId",
        "/_authenticated/posts/create",
        "/_authenticated/questions/create",
        "/_authenticated/users/$userId",
        "/_authenticated/questions/",
        "/_authenticated/users/",
        "/_authenticated/users/me/",
        "/_authenticated/users/me/posts/$postId",
        "/_authenticated/users/me/posts/"
      ]
    },
    "/_notAuthenticated": {
      "filePath": "_notAuthenticated.tsx",
      "children": [
        "/_notAuthenticated/auth/login",
        "/_notAuthenticated/auth/register"
      ]
    },
    "/_authenticated/posts/$postId": {
      "filePath": "_authenticated/posts/$postId.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/posts/create": {
      "filePath": "_authenticated/posts/create.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/questions/create": {
      "filePath": "_authenticated/questions/create.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/users/$userId": {
      "filePath": "_authenticated/users/$userId.tsx",
      "parent": "/_authenticated"
    },
    "/_notAuthenticated/auth/login": {
      "filePath": "_notAuthenticated/auth/login.tsx",
      "parent": "/_notAuthenticated"
    },
    "/_notAuthenticated/auth/register": {
      "filePath": "_notAuthenticated/auth/register.tsx",
      "parent": "/_notAuthenticated"
    },
    "/_authenticated/questions/": {
      "filePath": "_authenticated/questions/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/users/": {
      "filePath": "_authenticated/users/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/users/me/": {
      "filePath": "_authenticated/users/me/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/users/me/posts/$postId": {
      "filePath": "_authenticated/users/me/posts/$postId.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/users/me/posts/": {
      "filePath": "_authenticated/users/me/posts/index.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
