/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as UsersIndexImport } from './routes/users/index'
import { Route as QuestionsIndexImport } from './routes/questions/index'
import { Route as QuestionsCreateImport } from './routes/questions/create'
import { Route as PostsCreateImport } from './routes/posts/create'
import { Route as AuthRegisterImport } from './routes/auth/register'
import { Route as AuthLoginImport } from './routes/auth/login'
import { Route as UsersMeIndexImport } from './routes/users/me/index'
import { Route as UsersMePostsImport } from './routes/users/me/posts'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any)

const QuestionsIndexRoute = QuestionsIndexImport.update({
  id: '/questions/',
  path: '/questions/',
  getParentRoute: () => rootRoute,
} as any)

const QuestionsCreateRoute = QuestionsCreateImport.update({
  id: '/questions/create',
  path: '/questions/create',
  getParentRoute: () => rootRoute,
} as any)

const PostsCreateRoute = PostsCreateImport.update({
  id: '/posts/create',
  path: '/posts/create',
  getParentRoute: () => rootRoute,
} as any)

const AuthRegisterRoute = AuthRegisterImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any)

const UsersMeIndexRoute = UsersMeIndexImport.update({
  id: '/users/me/',
  path: '/users/me/',
  getParentRoute: () => rootRoute,
} as any)

const UsersMePostsRoute = UsersMePostsImport.update({
  id: '/users/me/posts',
  path: '/users/me/posts',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof rootRoute
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterImport
      parentRoute: typeof rootRoute
    }
    '/posts/create': {
      id: '/posts/create'
      path: '/posts/create'
      fullPath: '/posts/create'
      preLoaderRoute: typeof PostsCreateImport
      parentRoute: typeof rootRoute
    }
    '/questions/create': {
      id: '/questions/create'
      path: '/questions/create'
      fullPath: '/questions/create'
      preLoaderRoute: typeof QuestionsCreateImport
      parentRoute: typeof rootRoute
    }
    '/questions/': {
      id: '/questions/'
      path: '/questions'
      fullPath: '/questions'
      preLoaderRoute: typeof QuestionsIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/me/posts': {
      id: '/users/me/posts'
      path: '/users/me/posts'
      fullPath: '/users/me/posts'
      preLoaderRoute: typeof UsersMePostsImport
      parentRoute: typeof rootRoute
    }
    '/users/me/': {
      id: '/users/me/'
      path: '/users/me'
      fullPath: '/users/me'
      preLoaderRoute: typeof UsersMeIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/posts/create': typeof PostsCreateRoute
  '/questions/create': typeof QuestionsCreateRoute
  '/questions': typeof QuestionsIndexRoute
  '/users': typeof UsersIndexRoute
  '/users/me/posts': typeof UsersMePostsRoute
  '/users/me': typeof UsersMeIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/posts/create': typeof PostsCreateRoute
  '/questions/create': typeof QuestionsCreateRoute
  '/questions': typeof QuestionsIndexRoute
  '/users': typeof UsersIndexRoute
  '/users/me/posts': typeof UsersMePostsRoute
  '/users/me': typeof UsersMeIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/posts/create': typeof PostsCreateRoute
  '/questions/create': typeof QuestionsCreateRoute
  '/questions/': typeof QuestionsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/users/me/posts': typeof UsersMePostsRoute
  '/users/me/': typeof UsersMeIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/posts/create'
    | '/questions/create'
    | '/questions'
    | '/users'
    | '/users/me/posts'
    | '/users/me'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/posts/create'
    | '/questions/create'
    | '/questions'
    | '/users'
    | '/users/me/posts'
    | '/users/me'
  id:
    | '__root__'
    | '/'
    | '/auth/login'
    | '/auth/register'
    | '/posts/create'
    | '/questions/create'
    | '/questions/'
    | '/users/'
    | '/users/me/posts'
    | '/users/me/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  PostsCreateRoute: typeof PostsCreateRoute
  QuestionsCreateRoute: typeof QuestionsCreateRoute
  QuestionsIndexRoute: typeof QuestionsIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
  UsersMePostsRoute: typeof UsersMePostsRoute
  UsersMeIndexRoute: typeof UsersMeIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  PostsCreateRoute: PostsCreateRoute,
  QuestionsCreateRoute: QuestionsCreateRoute,
  QuestionsIndexRoute: QuestionsIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
  UsersMePostsRoute: UsersMePostsRoute,
  UsersMeIndexRoute: UsersMeIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/auth/login",
        "/auth/register",
        "/posts/create",
        "/questions/create",
        "/questions/",
        "/users/",
        "/users/me/posts",
        "/users/me/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/register": {
      "filePath": "auth/register.tsx"
    },
    "/posts/create": {
      "filePath": "posts/create.tsx"
    },
    "/questions/create": {
      "filePath": "questions/create.tsx"
    },
    "/questions/": {
      "filePath": "questions/index.tsx"
    },
    "/users/": {
      "filePath": "users/index.tsx"
    },
    "/users/me/posts": {
      "filePath": "users/me/posts.tsx"
    },
    "/users/me/": {
      "filePath": "users/me/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
